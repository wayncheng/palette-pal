{"version":3,"sources":["components/Swatch.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["Swatch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","event","preventDefault","$t","target","$clipboard","document","getElementById","colorData","getAttribute","console","log","value","select","execCommand","getSelection","removeAllRanges","state","classification","color","r","g","b","indexOf","m","substr","match","length","parseInt","brightnessByColor","react_default","a","createElement","className","id","concat","assignment","data-color","style","backgroundColor","onClick","name","Component","abc","Palette","componentDidMount","window","addEventListener","keyID","key","keyColor","keymap","executeCopy","i","colors","setState","colorInfo","onDeck","map","index","components_Swatch","React","defaultProps","App","src_components_Palette","Boolean","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAsHeA,cApFd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIPQ,YAAc,SAACC,GACdA,EAAMC,iBACN,IAAMC,EAAKF,EAAMG,OACXC,EAAaC,SAASC,eAAe,aAErCC,EAAYL,EAAGM,aAAa,cAClCC,QAAQC,IAAI,aAAaH,GAEzBH,EAAWO,MAAQJ,EACnBH,EAAWQ,SACXP,SAASQ,YAAY,QASrBR,SAASQ,YAAY,QAErBR,SAASS,eAAeC,mBAxBxBvB,EAAKwB,MAAQ,GAFKxB,wEAyDlB,IAAIyB,EAAiB,OAKrB,OAzFF,SAA2BC,GAE1B,IAEIC,EAAGC,EAAGC,EAEV,GAJmC,IAAvBH,EAAMI,QAAQ,KAIf,CACV,IAAIC,EAAIL,EAAMM,OAAO,GAAGC,MAAuB,IAAjBP,EAAMQ,OAAe,WAAa,YAC5DH,IACHJ,EAAIQ,SAASJ,EAAE,GAAI,IACnBH,EAAIO,SAASJ,EAAE,GAAI,IACnBF,EAAIM,SAASJ,EAAE,GAAI,KAYrB,GAAgB,oBAALJ,EAAkB,OAAY,IAAJA,EAAc,IAAJC,EAAc,IAAJC,GAAW,IA8DlDO,CAAkBjC,KAAKJ,MAAM2B,OAC7B,MAChBD,EAAiB,SAGjBY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OACCE,GAAI,WAAatC,KAAKJ,MAAM0C,GAC5BD,UAAS,WAAAE,OAAajB,GACtBkB,WAAYxC,KAAKJ,MAAM0C,GACvBG,aAAYzC,KAAKJ,MAAM2B,MACvBmB,MAAO,CACNC,gBAAiB3C,KAAKJ,MAAM2B,OAE7BqB,QAAS5C,KAAKI,aAEd8B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAarC,KAAKJ,MAAM0C,IACxCJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOQ,KAAM7C,KAAKJ,MAAM0C,IACtCtC,KAAKJ,MAAM2B,MAAMM,OAAO,aA7EViB,aC7BfC,SAAM,wCAENC,cACL,SAAAA,EAAYpD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,IACjBnD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkD,GAAA7C,KAAAH,KAAMJ,KAUPqD,kBAAoB,WAEnBC,OAAOC,iBAAiB,QAAS,SAAC9C,GACjCA,EAAMC,iBACN,IAAI8C,EAAQ/C,EAAMgD,IAEdC,EAAWzD,EAAKwB,MAAMkC,OAAOH,GAE9BE,IACFzD,EAAK2D,YAAYF,GACjBxC,QAAQC,IAAIqC,EAAME,MAOpB,IADA,IAAIC,EAAS,GACJE,EAAI,EAAGA,EAAI5D,EAAKD,MAAM8D,OAAO3B,OAAQ0B,IAAK,CAClD,IAAMH,EAAWzD,EAAKD,MAAM8D,OAAOD,GAEnCF,EADcR,EAAIU,IACFH,EAEjBzD,EAAK8D,SAAS,CACbJ,YAlCgB1D,EAwClBO,YAAc,SAACC,GACdA,EAAMC,iBACN,IACMM,EADKP,EAAMG,OACIK,aAAa,cAClCC,QAAQC,IAAI,aAAaH,GAEzBf,EAAK2D,YAAY5C,IA9CAf,EAiDlB2D,YAAc,SAAAI,GACb,IAAMnD,EAAaC,SAASC,eAAe,aAG3CF,EAAWO,MAAQ4C,EAGnBnD,EAAWQ,SAGXP,SAASQ,YAAY,QAGrBR,SAASS,eAAeC,mBA5DxBvB,EAAKwB,MAAM,CACVkC,OAAQ,GAGRM,QAAQ,GANQhE,wEAoEjB,OACCqC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdrC,KAAKJ,MAAM8D,OAAOI,IAAI,SAACvC,EAAOwC,GAC9B,IAAIzB,EAAKS,EAAIgB,GACb,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAQzC,MAAOA,EAAOe,GAAIA,EAAIe,IAAKf,cAzExB2B,IAAMnB,WA+EbE,IAEfA,EAAQkB,aAAe,CACtBR,OAAQ,QCvCMS,cA5Cd,SAAAA,EAAYvE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmE,IAClBtE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqE,GAAAhE,KAAAH,KAAMJ,KACDyB,MAAQ,GAFKxB,wEAMlB,OACCqC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEdH,EAAAC,EAAAC,cAACgC,EAAD,CACCV,OAAQ,CACP,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aAIFxB,EAAAC,EAAAC,cAAA,YAAUE,GAAG,YAAYO,KAAK,YAAYR,UAAU,yBAvCtCS,aCQEuB,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASzC,MACvB,2DCbN0C,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAAShE,SAASC,eAAe,SD4H3C,kBAAmBgE,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0ed7d5cf.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n/**\n * Calculate brightness value by RGB or HEX color.\n * @param color (String) The color value in RGB or HEX (for example: #000000 || #000 || rgb(0,0,0) || rgba(0,0,0,0))\n * @returns (Number) The brightness value (dark) 0 ... 255 (light)\n */\nfunction brightnessByColor(color) {\n\t// let color = '' + color;\n\tlet isHEX = color.indexOf('#') === 0;\n\t// let isRGB = color.indexOf('rgb') === 0;\n\tlet r, g, b;\n\n\tif (isHEX) {\n\t\tlet m = color.substr(1).match(color.length === 7 ? /(\\S{2})/g : /(\\S{1})/g);\n\t\tif (m) {\n\t\t\tr = parseInt(m[0], 16);\n\t\t\tg = parseInt(m[1], 16);\n\t\t\tb = parseInt(m[2], 16);\n\t\t}\n\t}\n\t// if (isRGB) {\n\t// \tlet m = color.match(/(\\d+){3}/g);\n\t// \tif (m) {\n\n\t// \t\tlet r = m[0],\n\t// \t\tg = m[1],\n\t// \t\tb = m[2];\n\t// \t}\n\t// }\n\tif (typeof r != 'undefined') return (r * 299 + g * 587 + b * 114) / 1000;\n}\n\nclass Swatch extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\thandleClick = (event) => {\n\t\tevent.preventDefault();\n\t\tconst $t = event.target;\n\t\tconst $clipboard = document.getElementById('clipboard');\n\t\t\n\t\tconst colorData = $t.getAttribute('data-color');\n\t\tconsole.log('colorData:',colorData);\n\n\t\t$clipboard.value = colorData;\n\t\t$clipboard.select();\n\t\tdocument.execCommand('copy');\n\t\t\n\t\t\n\t\t// const $data = document.querySelector(`#${$t.id} .data`);\n\t\t// $data.select(); // select data textarea\n\t\t\n\t\t\n\n\t\t// copy selection\n\t\tdocument.execCommand('copy');\n\t\t// clear selection on the page\n\t\tdocument.getSelection().removeAllRanges();\n\t\t\n\t\t// const selection = window.getSelection();\n\t\t// const range = document.createRange();\n\t\t// range.selectNodeContents($data);\n\t\t// selection.removeAllRanges();\n\t\t// selection.addRange(range);\n\n\t\t// try {\n\t\t// \tdocument.execCommand('copy');\n\t\t// \tselection.removeAllRanges();\n\n\t\t// \t// const original = $data.textContent;\n\t\t// \t// $data.textContent = 'Copied!';\n\t\t// \t// $data.classList.add('success');\n\n\t\t// \t// setTimeout(() => {\n\t\t// \t// \t$data.textContent = original;\n\t\t// \t// \t$data.classList.remove('success');\n\t\t// \t// }, 1200);\n\t\t// } catch (e) {\n\t\t// \tconst errorMsg = document.querySelector('.error-msg');\n\t\t// \terrorMsg.classList.add('show');\n\n\t\t// \tsetTimeout(() => {\n\t\t// \t\terrorMsg.classList.remove('show');\n\t\t// \t}, 1200);\n\t\t// }\n\t};\n\n\trender() {\n\t\tlet classification = 'dark';\n\t\tlet brightness = brightnessByColor(this.props.color);\n\t\tif (brightness > 200) {\n\t\t\tclassification = 'light';\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"swatch\">\n\t\t\t\t<div\n\t\t\t\t\tid={'swatch__' + this.props.id}\n\t\t\t\t\tclassName={`content ${classification}`}\n\t\t\t\t\tassignment={this.props.id}\n\t\t\t\t\tdata-color={this.props.color}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: this.props.color\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t>\n\t\t\t\t\t<span className=\"swatch-id\">{this.props.id}</span>\n\t\t\t\t\t<span className=\"data\" name={this.props.id}>\n\t\t\t\t\t\t{this.props.color.substr(1)}\n\t\t\t\t\t</span>\n\t\t\t\t\t{/* <textarea name={this.props.id} className=\"data\" value={this.props.color.substr(1)} cols=\"7\" rows=\"1\"></textarea> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Swatch;\n","import React from 'react';\nimport Swatch from './Swatch';\nimport './Palette.scss';\n\nconst abc = 'abcdefghijklmnopqrstuvwxyz1234567890';\n\nclass Palette extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tkeymap: {\n\t\t\t\t// a: '#000',\n\t\t\t},\n\t\t\tonDeck: false,\n\t\t}\n\t}\n\n\n\tcomponentDidMount = () => {\n\n\t\twindow.addEventListener('keyup', (event) => {\n\t\t\tevent.preventDefault();\n\t\t\tlet keyID = event.key;\n\t\t\t\n\t\t\tlet keyColor = this.state.keymap[keyID];\n\n\t\t\tif(keyColor){\n\t\t\t\tthis.executeCopy(keyColor)\n\t\t\t\tconsole.log(keyID,keyColor);\n\t\t\t}\n\n\t\t})\n\n\t\t// map keys in state\n\t\tlet keymap = {};\n\t\tfor (let i = 0; i < this.props.colors.length; i++) {\n\t\t\tconst keyColor = this.props.colors[i];\n\t\t\tconst keyID = abc[i];\n\t\t\tkeymap[keyID] = keyColor\n\t\t}\n\t\tthis.setState({\n\t\t\tkeymap\n\t\t})\n\n\n\t}\n\n\thandleClick = (event) => {\n\t\tevent.preventDefault();\n\t\tconst $t = event.target;\t\t\n\t\tconst colorData = $t.getAttribute('data-color');\n\t\tconsole.log('colorData:',colorData);\n\n\t\tthis.executeCopy(colorData)\n\t};\n\n\texecuteCopy = colorInfo => {\n\t\tconst $clipboard = document.getElementById('clipboard');\n\t\t\n\t\t// write to clipboard\n\t\t$clipboard.value = colorInfo;\n\n\t\t// select clipboard's contents\n\t\t$clipboard.select();\n\t\t\n\t\t// copy selection\n\t\tdocument.execCommand('copy');\n\t\t\n\t\t// clear selection on the page\n\t\tdocument.getSelection().removeAllRanges();\n\t}\n\n\n\trender(){\n\n\t\treturn (\n\t\t\t<div className=\"palette\">\n\t\t\t{this.props.colors.map((color, index) => {\n\t\t\t\tlet id = abc[index];\n\t\t\t\treturn <Swatch color={color} id={id} key={id} />;\n\t\t\t})}\n\t\t</div>\n\t);\n}\n};\nexport default Palette;\n\nPalette.defaultProps = {\n\tcolors: []\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Palette from './components/Palette';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{/* <Palette colors={[ '#000000', '#111111', '#222222', '#333333', '#444444', '#555555', '#666666', '#777777', '#888888', '#999999', '#aaaaaa', '#bbbbbb', '#cccccc', '#dddddd', '#eeeeee', '#ffffff', ]} /> */}\n\t\t\t\t<Palette\n\t\t\t\t\tcolors={[\n\t\t\t\t\t\t'#E63217',\n\t\t\t\t\t\t'#FA4A2F',\n\t\t\t\t\t\t'#FFB0B0',\n\t\t\t\t\t\t'#FA7319',\n\t\t\t\t\t\t'#FF8B3D',\n\t\t\t\t\t\t'#FFC88A',\n\t\t\t\t\t\t'#FFD70D',\n\t\t\t\t\t\t'#FAEF23',\n\t\t\t\t\t\t'#FFFAA3',\n\t\t\t\t\t\t'#08CC56',\n\t\t\t\t\t\t'#35DB77',\n\t\t\t\t\t\t'#87FAB5',\n\t\t\t\t\t\t'#0877C2',\n\t\t\t\t\t\t'#3599DB',\n\t\t\t\t\t\t'#84C8F5',\n\t\t\t\t\t\t'#8537A3',\n\t\t\t\t\t\t'#9B59B6',\n\t\t\t\t\t\t'#E9B0FF',\n\t\t\t\t\t\t'#5C6370',\n\t\t\t\t\t\t'#6D7585',\n\t\t\t\t\t\t'#BAC4D4',\n\t\t\t\t\t\t'#474D57',\n\t\t\t\t\t\t'#5C6370',\n\t\t\t\t\t\t'#929EB3'\n\t\t\t\t\t]}\n\t\t\t\t/>\n\n\t\t\t\t<textarea id=\"clipboard\" name=\"clipboard\" className=\"fully-hidden\" />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}