{"version":3,"sources":["components/Swatch.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["Swatch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","classification","color","r","g","b","indexOf","m","substr","match","length","parseInt","brightnessByColor","react_default","a","createElement","className","id","concat","assignment","data-color","style","backgroundColor","name","Component","abc","flashDuration","Palette","componentDidMount","window","addEventListener","event","preventDefault","keyID","key","keyColor","keymap","executeCopy","console","log","setState","i","colors","handleClick","$t","target","classList","contains","colorData","getAttribute","$clipboard","document","getElementById","value","select","execCommand","getSelection","removeAllRanges","flashAlert","$flash","add","flashFiring","setTimeout","remove","onDeck","onClick","map","index","components_Swatch","background","animationDuration","React","defaultProps","App","src_components_Palette","Boolean","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46fa4770.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n/**\n * Calculate brightness value by RGB or HEX color.\n * @param color (String) The color value in RGB or HEX (for example: #000000 || #000 || rgb(0,0,0) || rgba(0,0,0,0))\n * @returns (Number) The brightness value (dark) 0 ... 255 (light)\n */\nfunction brightnessByColor(color) {\n\t// let color = '' + color;\n\tlet isHEX = color.indexOf('#') === 0;\n\t// let isRGB = color.indexOf('rgb') === 0;\n\tlet r, g, b;\n\n\tif (isHEX) {\n\t\tlet m = color.substr(1).match(color.length === 7 ? /(\\S{2})/g : /(\\S{1})/g);\n\t\tif (m) {\n\t\t\tr = parseInt(m[0], 16);\n\t\t\tg = parseInt(m[1], 16);\n\t\t\tb = parseInt(m[2], 16);\n\t\t}\n\t}\n\t// if (isRGB) {\n\t// \tlet m = color.match(/(\\d+){3}/g);\n\t// \tif (m) {\n\n\t// \t\tlet r = m[0],\n\t// \t\tg = m[1],\n\t// \t\tb = m[2];\n\t// \t}\n\t// }\n\tif (typeof r != 'undefined') return (r * 299 + g * 587 + b * 114) / 1000;\n}\n\nclass Swatch extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\t// handleClick = (event) => {\n\t// \tevent.preventDefault();\n\t// \tconst $t = event.target;\n\t// \tconst $clipboard = document.getElementById('clipboard');\n\t\t\n\t// \tconst colorData = $t.getAttribute('data-color');\n\t// \tconsole.log('colorData:',colorData);\n\n\t// \t$clipboard.value = colorData;\n\t// \t$clipboard.select();\n\n\t// \t// copy selection\n\t// \tdocument.execCommand('copy');\n\t// \t// clear selection on the page\n\t// \tdocument.getSelection().removeAllRanges();\n\t\t\n\t// \talert(`Copied: ${colorData}`)\n\t// };\n\n\trender() {\n\t\tlet classification = 'dark';\n\t\tlet brightness = brightnessByColor(this.props.color);\n\t\tif (brightness > 200) {\n\t\t\tclassification = 'light';\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"swatch\">\n\t\t\t\t<div\n\t\t\t\t\tid={'swatch__' + this.props.id}\n\t\t\t\t\tclassName={`swatch-target content ${classification}`}\n\t\t\t\t\tassignment={this.props.id}\n\t\t\t\t\tdata-color={this.props.color}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: this.props.color\n\t\t\t\t\t}}\n\t\t\t\t\t// onClick={this.handleClick}\n\t\t\t\t>\n\t\t\t\t\t<span className=\"swatch-id\">{this.props.id}</span>\n\t\t\t\t\t<span className=\"data\" name={this.props.id}>\n\t\t\t\t\t\t{this.props.color.substr(1)}\n\t\t\t\t\t</span>\n\t\t\t\t\t{/* <textarea name={this.props.id} className=\"data\" value={this.props.color.substr(1)} cols=\"7\" rows=\"1\"></textarea> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Swatch;\n","import React from 'react';\nimport Swatch from './Swatch';\nimport './Palette.scss';\n\nconst abc = 'abcdefghijklmnopqrstuvwxyz1234567890';\nconst flashDuration = 900;\nclass Palette extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tkeymap: {\n\t\t\t\t// a: '#000',\n\t\t\t},\n\t\t\tonDeck: false,\n\t\t\tflashFiring: false,\n\t\t\tcolor: ''\n\t\t};\n\t}\n\n\tcomponentDidMount = () => {\n\t\t// Listen to key presses for letter's that are assigned to swatches.\n\t\t// If key is assigned, we do the whole copy thing.\n\t\twindow.addEventListener('keyup', (event) => {\n\t\t\tevent.preventDefault();\n\t\t\tlet keyID = event.key;\n\n\t\t\tlet keyColor = this.state.keymap[keyID];\n\n\t\t\tif (keyColor) {\n\t\t\t\tthis.executeCopy(keyColor);\n\t\t\t\tconsole.log(keyID, keyColor);\n\n\t\t\t\tthis.setState({ color: keyColor });\n\t\t\t}\n\t\t});\n\n\t\t// map keys in state\n\t\tlet keymap = {};\n\t\tfor (let i = 0; i < this.props.colors.length; i++) {\n\t\t\tconst keyColor = this.props.colors[i];\n\t\t\tconst keyID = abc[i];\n\t\t\tkeymap[keyID] = keyColor;\n\t\t}\n\t\tthis.setState({\n\t\t\tkeymap\n\t\t});\n\t};\n\n\t// Listen for click events on palette because of event delegation\n\t// Only interested in the swatches that have the data attributes, so\n\t// we check if the event target has the class 'swatch-target' and if\n\t// it does, then we go through the copying process. If not, do nothing.\n\thandleClick = (event) => {\n\t\tevent.preventDefault();\n\t\tconst $t = event.target;\n\n\t\tif ($t.classList.contains('swatch-target')) {\n\t\t\tconst colorData = $t.getAttribute('data-color');\n\t\t\tconsole.log('colorData:', colorData);\n\n\t\t\tthis.executeCopy(colorData);\n\t\t\tthis.setState({ color: colorData });\n\t\t}\n\t};\n\n\texecuteCopy = (colorData) => {\n\t\tconst $clipboard = document.getElementById('clipboard');\n\n\t\t// write to clipboard\n\t\t$clipboard.value = colorData;\n\n\t\t// select clipboard's contents\n\t\t$clipboard.select();\n\n\t\t// copy selection\n\t\tdocument.execCommand('copy');\n\n\t\t// clear selection on the page\n\t\tdocument.getSelection().removeAllRanges();\n\n\t\t// alert(`Copied: ${colorData}`);\n\t\tthis.flashAlert();\n\t};\n\n\tflashAlert = () => {\n\t\tconst $flash = document.getElementById('flash');\n\n\t\t// if (this.state.flashFiring === false){\n\n\t\t\t// fire the flash\n\t\t\t$flash.classList.add('firing');\n\t\t\tthis.setState({ flashFiring: true })\n\t\t\t\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.setState({ flashFiring: false })\n\t\t\t\t$flash.classList.remove('firing');\n\t\t\t}, flashDuration);\n\n\t\t// }\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"palette\" onClick={this.handleClick}>\n\t\t\t\t{this.props.colors.map((color, index) => {\n\t\t\t\t\tlet id = abc[index];\n\t\t\t\t\treturn <Swatch color={color} id={id} key={id} />;\n\t\t\t\t})}\n\n\t\t\t\t{/* {this.state.flashFiring && ( */}\n\t\t\t\t<span\n\t\t\t\t\tid=\"flash\"\n\t\t\t\t\tclassName=\"flash\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackground: this.state.color,\n\t\t\t\t\t\tanimationDuration: flashDuration + 'ms',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<h2>{this.state.color}</h2>\n\t\t\t\t</span>\n\t\t\t\t{/* )} */}\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Palette;\n\nPalette.defaultProps = {\n\tcolors: []\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Palette from './components/Palette';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{/* <Palette colors={[ '#000000', '#111111', '#222222', '#333333', '#444444', '#555555', '#666666', '#777777', '#888888', '#999999', '#aaaaaa', '#bbbbbb', '#cccccc', '#dddddd', '#eeeeee', '#ffffff', ]} /> */}\n\t\t\t\t<Palette\n\t\t\t\t\tcolors={[\n\t\t\t\t\t\t'#E63217',\n\t\t\t\t\t\t'#FA4A2F',\n\t\t\t\t\t\t'#FFB0B0',\n\t\t\t\t\t\t'#FA7319',\n\t\t\t\t\t\t'#FF8B3D',\n\t\t\t\t\t\t'#FFC88A',\n\t\t\t\t\t\t'#FFD70D',\n\t\t\t\t\t\t'#FAEF23',\n\t\t\t\t\t\t'#FFFAA3',\n\t\t\t\t\t\t'#08CC56',\n\t\t\t\t\t\t'#35DB77',\n\t\t\t\t\t\t'#87FAB5',\n\t\t\t\t\t\t'#0877C2',\n\t\t\t\t\t\t'#3599DB',\n\t\t\t\t\t\t'#84C8F5',\n\t\t\t\t\t\t'#8537A3',\n\t\t\t\t\t\t'#9B59B6',\n\t\t\t\t\t\t'#E9B0FF',\n\t\t\t\t\t\t'#5C6370',\n\t\t\t\t\t\t'#6D7585',\n\t\t\t\t\t\t'#BAC4D4',\n\t\t\t\t\t\t'#474D57',\n\t\t\t\t\t\t'#5C6370',\n\t\t\t\t\t\t'#929EB3'\n\t\t\t\t\t]}\n\t\t\t\t/>\n\n\t\t\t\t<textarea id=\"clipboard\" name=\"clipboard\" className=\"fully-hidden\" />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}